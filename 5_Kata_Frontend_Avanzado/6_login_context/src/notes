1: crear estrucutura de carpetas (components, context, pages, config)
2: Instalar react-router-dom
3: En la carpeta config creamos un archivo llamado routes, donde guardaremos todas las rutas de la app
4: Dentro de ese archivo creamos una matriz de objetos que definen que path se asigna a cada componente
5: configuramos el react-router en App.js
function App() {
  return (
    <Router>
      <Switch>
        {routes.map((route) => (
          <Route
            key={route.path}
            path={route.path}
            component={route.component}
          />
        ))}
      </Switch>
    </Router>
  );
}

6: en la carpeta pages, creamos un archivo llamado Login, Dashboard y NotFound que albergara el codigo para cada componente
7: En la carpeta context creamos un archivo context.js que contendra lo que necesitamos para usar el contexto

AUTHCONTEXT: //CONTIENE EL TOKEN DE AUTENTICACION Y LOS DETALLES DEL USUARIO
AUTHDISPATCHCONTEXT: // SIRVE PARA PASAR EL METODO DE ENVIO QUE NOS DA EL USE REDUCER PARA ADMINISTRAR EL ESTADO AL O LOS COMPONNETES QUE LO NECESITAN

8: LUEGO EN ESE MISMO ARCHIVO CREAMOS LOS HOOKS PERSONALIZADOS (USEAUTHCONTEXT, USEAUTHDISPATCH) Y TAMBIEN LANZA ALGUN ERROR EN CASO DE QUE ESTOS SE QUIERAN USAR FUERA DE LOS PROVEEDORES DE CONETXTO
9: EN ESE MISMO ARCHIVO CREAMOS UN PROVEEDOR PERSONALIZADO LLAMADO AUTHPROVIDER, QUE PROVEE DEL CONTEXTO A LA APLICACION.
ESTA FUNCION ES NUESTRA ADMINISTRACION DEL ESTADO USANDO USE REDUCER. DEVUELVE UN OBJETO DE ESTADO Y UN METODO DE ENVIO PARA LOS CAMBIOS DE ESTADO
PASAMOS EL AUTHSTATECONTEXT Y EL AUTHDISPATCHCONTEXT PARA QUE LOS HIJOS DEL AUTHPROVIDER TENGAN ACCESO AL OBJETO DE USUARIO Y EL METODO DE ENVIO

10: CREAMOS EL REDUCER DEL USE REDUCER. CREAMOS UN ARCHIVO NUEVO EN LA CARPETA CONTEXT LLAMADO REDUCER.JS

Creamos el objeto de estado inicial que tiene estas propiedades:

userDetails: userDetails es para almacenar el objeto de usuario devuelto por el servidor al iniciar sesión correctamente. Intentamos leer el userDetailsdel localStorage para mantener el estado de inicio de sesión en todas las sesiones.
token: Es para almacenar el token de autenticación devuelto por el servidor, también se conserva utilizando el almacenamiento local de los navegadores.
loading: es para almacenar el estado de carga del formulario de inicio de sesión cuando se envía.
errorMessage: es para almacenar el mensaje de error devuelto si falla el inicio de sesión.

 creamos la funcion reductora que acepta un initialState y un objeto de acción ({type: “ACTION_TYPE”}) como argumentos y luego devuelve un nuevo estado basado en el tipo de acción especificado.

 11: Finalmente, para la carpeta de contexto, queremos definir algunas funciones asíncronas que llamo acciones.
  Estas funciones envían múltiples actualizaciones de estado como resultado de una solicitud Http. 
  Tenemos dos de estas acciones, una función loginUsery logout.
  La loginUser manejará solicitudes asincrónicas al servidor para autenticar los detalles de inicio de sesión de un usuario.
  La logout se usa para cerrar la sesión de un usuario en una sesión autenticada.


loginUser se le pasa un método de envío y la carga de inicio de sesión como argumentos. 
Inmediatamente loginUserse llama, enviamos una actualización de estado de tipo REQUEST_LOGIN para activar una actualización de estado del estado de AuthReducer, 
esto le dice al AuthReducer que las solicitudes de inicio de sesión han comenzado.

Luego, si el inicio de sesión fue exitoso, una acción de tipo LOGIN_SUCCESS y un obejeto que contiene la respuesta de inicio de sesión se pasa al AuthReducer para actualizar el estado
 (los detalles del usuario y el token de autenticación).

Finalmente, si la solicitud de inicio de sesión falla, se envía una acción de tipo LOGIN_ERRORcon un objeto de error al AuthReducer para actualizar el estado

Para el logout, también se pasa un método de envío. Inmediatamente logout se llama, envía una acción de tipo LOGOUT, esto restablece el estado de AuthReducer al estado inicial (elimina el token y el objeto de detalles del usuario del estado)
luego elimina el currentUsery tokendel almacenamiento local.

12: importamos todos los archivos al index y los exportamos.

13. Envolvemos la aplicacion con el AUTHPROVIDER para asegurarnos que cada componente de la aplicacion tenga acceso a los objetos del contexto.
En el app.js lo importamos y lo envolvemos asi:
<AuthProvider>
            <Router>
                <Switch>
                    {routes.map((route) => (
                        <AppRoutes
                            key={route.path}
                            path={route.path}
                            component={route.component}
                            isPrivate={route.isPrivate}
                        />
                    ))}
                </Switch>
            </Router>
        </AuthProvider>

Una vez asi, lo que tenemos que hacer es leer este objeto de contexto donde se necesite

14: En Login.js creamos el handlelogin que invoca al metodo loginUser, el cual acepta un metodo de envio y el objeto de datos que se envia al servidor
para el inicio de sesion, luego envia el cambio de estado segun la respuesta obtenida

El loginUser toma un metodo de envio desde el USEAUTHDISPATCH.

El loginUser maneja las actualizaciones de estado dependiendo la respuesta del servidor. usamos el USEAUTHSTATE para indicar que el formulario se esta enviando y obtener un mensaje de error si algo falla
 (Hago todo las modificaciones al archivo del Login.js)



 15: Implementamos la funcion de cerrar sesion. Esta elimina el token y los datos de usuario del localstorage y toma un metodo de envio como argumento
 (ver el archivo de Dashboard.js para el handleLogout)

 16: Protegemos las rutas privadas para que no se pueda acceder sin autenticacion. Definimos la rutas privadas en el routes.js y creamos el componente de orden superior
 que nos va a servir para redirigir al usuario a la ruta privada si esta autenticado o al login si no lo esta.

 17: Creamos el componente de orden superior. En el pasamos de otra manera los componentes para reemplazar al Route y la ruta privada y utilizamos el AUTHSTATECONTEXT para determinar si viene un token de autenticacion