DEFINICIONES DE ARQUITECTURA DE SOFTWARE 

1. DECISIONES DE DISENIO: Por ejemplo que mis microservicios utilicen todos una sola base de datos y no una por separado

2. ATRIBUTOS DE CALIDAD: Esto va mas alla de lo funcional, por ejemplo la facilidad de mantenimiento de mi aplicacion, la escalabilidad

3. COSAS IMPORTANES: Por ejemplo para el product owner son importantes las caracteristicas del producto y de como se reflejan en la arquitectura de la aplicacion,
para los desarrolladores puede ser importante que lenguaje utilizar y que frameworks,  para el soporte tecnico puede ser donde estaran ubicadas las maquinas





PATRONES DE ARQUITECTURA MAS COMUNES:

1. CLIENTE-SERVIDOR: EL CLIENTE ES UNA MAQUINA QUE SOLICITA DATOS O SERVICIOS Y EL SERVIDOR ES UNA MAQUINA QUE DEVUELVE INFORMACION AL CLIENTE. EL SERVIDOR RESPONDE A TRAVES DE INTERNET SIGUIENDO DIFERENTES PROTOCOLOS, COMO EL HTTP Y EL HTTPS, ENVIANDO DATOS EN FORMATO JSON GENERALMENTE.



2.ARQUITECTURA DE TRES NIVELES: CONSTA DE TRES CAPAS:

* CAPA DE PRESENTACION: MANEJA LA INTERACCION ENTRE EL CLIENTE Y LA APLICACION. ESTA CAPA SOLICITA INFORMACION AL USUARIO (FORMULARIOS, CLICKS EN BOTONES, ETC...) PARA DESPUES ENTREGARLA A LA CAPA DE NEGOCIO. POR EJEMPLO: LA CONSOLA, UNA APP WEB, UNA APLICACION MOVIL, UNA API

*CAPA DE NEGOCIO: CONTIENE EL TRABAJO O LAS TAREAS PARA LAS CUALES EL SISTEMA ESTA HECHO. POR EJEMPLO: CALCULAR DATOS BASANDOSE EN LOS CAMPOS DE ENTRADA, VALIDACIONES DE DATOS DE LA CAPA DE PRESENTACION Y DEFINR LA LOGICA O ALGORITMOS A UTILIZAR PARA MANDAR UNA RESPUESTA.

* CAPA DE DATOS: ES LA QUE SE COMUNICA DIRECTAMENTE CON LA BASE DE DATOS, POR EJEMPLO: MONITORES DE TRANSACCIONES, SISTEMAS DE PERFILES DE USUARIO, SISTEMAS DE MENSAJERIA.



3. ARQUITECTURA MODELO - VISTA - CONTROLADOR:

* MODELO: ES EL QUE TIENE LOS DATOS QUE OBTUVO DE LA BASE DE DATOS, ADEMAS PUEDE TAMBIEN MANEJAR ENTRE OTRAS COSAS EL ESTADO DE LA APLICACION.

* VISTA: MUESTRA LA INFORMACION QUE VIENE DESDE EL MODELO Y TAMBIEN SE PUEDE ACTUALIZAR DEPENDIENDO DE ESTE ULTIMO.

* CONTROLADOR: ES EL QUE TIENE LA LOGICA DE LA APLICACION, RECIBE LAS SOLICITUDES DE LA VISTA Y EJECUTA ACCIONES EN EL MODELO.

LA VISTA INTERACTUA CON EL USUARIO, ENVIA PETICIONES AL CONTROLADOR Y DEPENDIENDO DE LA PETICION, EL CONTROLADOR INVOCA AL MODELO Y ESTE MODELO PUEDE NOTIFICAR A LA VISTA DE CAMBIOS DE ESTADO PARA QUE SE ACTUALICE



4. ARQUITECTURA BASADA EN EVENTOS: 

CONSTA DE PRODUCTORES DE EVENTOS QUE GENERAN UN FLUJO DE EVENTOS Y CONSUMIDORES DE EVENTOS QUE ESCUCHAN ESOS EVENTOS. LOS EVENTOS SE EJECUTAN CASI EN TIEMPO REAL DE MODO QUE LOS CONSUMIDORES PUEDAN RESPONDER INMEDIATAMENTE A LOS EVENTOS QUE SE PRODUCEN.

POR EJEMPLO CUANDO HACEMOS UNA PETICION A UN SERVIDOR Y ESTE RESPONDE CON EL CONTENIDO QUE SE HAYA PEDIDO. SI LA PETICION TARDA Y EL SERVIDOR NO RESUELVE, SE DA POR HECHO DE QUE ES ASINCRONO Y DE QUE EN ALGUN MOMENTO SE ATENDERA. EL SENTIDO ES QUE NO DEPENDEMOS DE UNA CONFIRMACION DEL SERVIDOR. OTRO EJEMPLO ES QUE AL ENVIAR UN EMAIL, PUEDE QUE EL RECEPTOR LO RECIBA 5 MINUTOS DESPUES PORQUE EL SERVIDOR ESTA OCUPADO CON OTRAS ENTEGAS, A ESTO SE LE CONOCE COMO ASINCRONISIDAD PORQUE NO ESPERAMOS A QUE SE COMPLETE LA TAREA, SINO QUE DAMOS POR HECHO DE QUE EN ALGUN MOMENTO SE VA A RESOLVER. OTRO EJEMPLO PUEDE SER CUANDO HACEMOS TRANSACCIONES MONETARIAS, SI YO COMPRO UN ARTICULO CON TARJETA, LA TRANSACCION O EL EVENTOSE EJECUTA CASI INMEDIATAMENTE, PERO LA NOTIFICACION A MI TELEFONO DE DICHA TRANSACCION ME CAE 5 MUNUTOS DESPUES; ENTONCES EL EVENTO NO DEPENDE DE LA RESPUESTA DEL SERVIDOR QUE ME NOTIFICA DICHA TRANSACCION.


5. ARQUITECTURA DE MICROSERVICIOS: ASUMIMOS QUE UNA APLICACION ES UN CONJUNTO DE SERVICIOS PEQUENIOS. CADA MICROSERVICIOS EJECUTA SU PROPIO PROCESO. SI SE NECESITA COMUNICACION ENTRE MICROSERVICIOS, ESTOS LO HACEN MEDIANTE MECANISMOS LIVIANOS. ESTOS MICROSERVICIOS SE DESARROLAN DEPENDIENDO DE LAS NECESIDADES DEL NEGOCIO. UN EJEMPLO VENDRIA SIENDO LAS API REST, QUE SON URLS QUE EJECUTAN UNA TAREA EN ESPECIFICO Y EXPONEN LA INFORMACION QUE EL CLIENTE ESTA SOLICITANDO.


6. SERVLESS: EL DESAROOLADOR DE LA APLICACION NO SE PREOCUPA POR EL MANEJO DE SERVIDORES NI POR LA LOGICA DE DESPLIEGUE DE ESTOS, SINO QUE SE LO DEJA A SERVICIOS DE TERCEROS, COMO FIREBASE DE GOOGLE. ESTOS SERVICIOS QUE OFRECEN YA TRAEN PRE CONFIGURADAS BASES DE DATOS, AUTENTICACION, ANALITICAS, SUBIDA Y ALMACENAMIENTO DE ARCHIVOS, ETC...

PUEDE TENER COMPLICACIONES CUANDO EL SERVIDOR NO SE ESTA UTILIZANDO, POR LO MISMO PUEDE QUE TARDE UN TIEMPO EN LEVANTAR TODOS LOS SERVICIOS QUE ESTE UTILIZA PROVOCANDO UN PEQUENIO PROBLEMA DE RENDIMIENTO.